<< 카카오톡 소셜 로그인 >>
1. 프론트엔드에서 카카오톡 소셜 로그인 요청: 사용자가 프론트엔드에서 로그인 버튼을 클릭하면, 카카오 API를 통해 로그인 팝업이 뜨고 사용자가 로그인을 수행
2. 카카오 API에서 액세스 토큰 발급: 사용자가 로그인에 성공하면 카카오 API에서 액세스 토큰을 발급
3. 프론트엔드에서 액세스 토큰을 서버로 전송: 프론트엔드는 받은 액세스 토큰을 서버로 안전하게 전송
4. 서버에서 카카오 API에 사용자 정보 요청: 서버는 받은 액세스 토큰을 사용하여 카카오 API 서버에 사용자 정보를 요청
5. 서버에서 프론트엔드로 사용자 정보 응답: 카카오 API 서버에서 받은 사용자 정보를 기반으로 서버는 응답으로 사용자에 대한 정보(예: 이메일, 닉네임)를 프론트엔드에게 전송
6. 프론트엔드에서 사용자 정보 활용: 프론트엔드는 받은 사용자 정보를 기반으로 UI를 업데이트하거나, 로그인 성공 페이지로 이동하는 등의 동작을 수행

jsKey = "09a20fe694f36680bc9baefcbc101b4d";


<< 네이버 소셜 로그인 >>
1. 네이버 SDK 초기화: useEffect 훅을 사용하여 컴포넌트가 마운트될 때 initializeNaverLogin 함수가 호출. 
    이 함수에서 네이버 SDK를 초기화하고, 네이버 로그인 버튼의 옵션을 설정. 네이버 로그인 버튼은 해당 컴포넌트의 div 요소 안에 렌더링될 것.
2. 네이버 로그인 버튼 클릭: 사용자가 네이버 로그인 버튼을 클릭하면, 네이버 SDK가 제공하는 팝업 창이 열림. 
    이 팝업 창에서 사용자는 네이버 계정 정보로 로그인할 수 잇음.
3. 로그인 성공 및 콜백 처리: 사용자가 로그인에 성공하면, 네이버 서버는 클라이언트에게 인증 코드(Authorization Code)를 전달.
    이 코드는 보안상의 이유로 프론트엔드에서 바로 사용X
4. 콜백 URL로 리다이렉션: 네이버 서버는 설정한 콜백 URL(http://localhost:3000)로 사용자의 인증 코드를 전달. 
    이 때, 서버 사이드에서 이 코드를 활용하여 네이버 API에 액세스 토큰을 요청. 따라서 이 코드는 주로 백엔드에서 처리.
5. 액세스 토큰 요청 및 사용자 정보 가져오기: 백엔드 서버에서는 전달받은 인증 코드를 사용하여 네이버 API에 액세스 토큰을 요청.
    이 액세스 토큰을 사용하여 네이버 API를 호출하여 사용자 정보를 가져올 수 있음.

clientId: "54J1OBXfGf6lSgCRr31r"

<< 구글 소셜 로그인>>
1. 사용자 클릭: 사용자가 구글 소셜 로그인 버튼을 클릭
2. 구글 소셜 로그인 창 띄우기: 클릭하면 웹 페이지에서 구글 소셜 로그인 API가 제공하는 팝업 창이 열립니다. 이 창에서 사용자는 구글 계정 정보로 로그
3. 사용자 로그인: 사용자가 구글 계정으로 성공적으로 로그인하면, 구글 서버는 클라이언트에게 인증 코드(Authorization Code)를 전송
4. 클라이언트에서 서버로 인증 코드 전송: 프론트엔드는 받은 인증 코드를 백엔드(서버)로 안전하게 전송
5. 서버에서 구글 API에 액세스 토큰 요청: 백엔드 서버는 받은 인증 코드를 사용하여 구글 API 서버에 액세스 토큰을 요청
6. 액세스 토큰 응답: 구글 API 서버는 유효한 인증 코드일 경우 액세스 토큰을 응답
7. 클라이언트로 액세스 토큰 응답: 백엔드 서버는 받은 액세스 토큰을 프론트엔드로 전송
8. 프론트엔드에서 액세스 토큰을 사용하여 구글 API에 요청: 프론트엔드는 받은 액세스 토큰을 사용하여 구글 API 서버에 요청을 보내어 사용자 정보를 가져옴

clientId = '7029190476-csnl0o38a62r9hh0p8s50ujg62fqiuji$$'


